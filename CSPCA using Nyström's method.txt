#This is the function to perform CSPCA using Nystr√∂m's extension.

def supervised_pca(X, Y, q, p, m, lambda_):
    XtY = X.T @ Y
    YtX = Y.T @ X
    XtX = X.T @ X
    C = XtY @ YtX + lambda_ * XtX  
    indices = onp.random.choice(p, size=m, replace=False)
    C_nm = C[:, indices]  
    C_mm = C[indices, :][:, indices]  
    eigenvalues, U_m = linalg.eigh(C_mm)  
    sorted_indices = onp.argsort(eigenvalues)[::-1]
    eigenvalues = eigenvalues[sorted_indices]
    U_m = U_m[:, sorted_indices]
    Lambda_m = onp.diag(eigenvalues)
    Lambda_m_inv_sqrt = onp.diag(1.0 / onp.sqrt(onp.maximum(eigenvalues, 1e-6)))
    U_n = C_nm @ U_m @ Lambda_m_inv_sqrt  
    C_mm_inv = pinv(C_mm)  
    C_approx = C_nm @ C_mm_inv @ C_nm.T
    W = U_n[:, :q]
    W, _ = qr(W, mode='economic')  
    return {'W': W, 'eigenvalues': eigenvalues[:q]}
